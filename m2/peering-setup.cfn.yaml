AWSTemplateFormatVersion: 2010-09-09
Description: This templates creates a VPC Peering connection. (Requester Account)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - RouteTableIds
          - NumberOfRouteTables
          - PeerRouteTableIds
          - PeerNumberOfRouteTables
      - Label:
          default: VPC Peering Configuration
        Parameters:
          - PeerName
          - PeerOwnerId
          - PeerRoleARN
          - PeerVPCID
          - PeerVPCCIDR
      - Label:
          default: Security Groups Configuration
        Parameters:
          - SecurityGroupIds
          - NumberOfSecurityGroups
          - PeerSecurityGroupIds
          - PeerNumberOfSecurityGroups
    ParameterLabels:
      NumberOfRouteTables:
        default: Number of Route Tables
      NumberOfSecurityGroups:
        default: Number of Security Groups
      PeerNumberOfRouteTables:
        default: Peer Number of Route Tables
      PeerNumberOfSecurityGroups:
        default: Peer Number of Security Groups
      PeerName:
        default: Peer Name
      PeerOwnerId:
        default: Peer Owner ID
      PeerRoleARN:
        default: Peer Role ARN
      PeerVPCID:
        default: Peer VPC ID
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
      PeerVPCCIDR:
        default: Peer VPC CIDR
      RouteTableIds:
        default: Route Table IDs
      SecurityGroupIds:
        default: Security Group IDs
      PeerRouteTableIds:
        default: Peer Route Table IDs
      PeerSecurityGroupIds:
        default: Peer Security Group IDs
Parameters:
  NumberOfRouteTables:
    AllowedValues: [1, 2, 3, 4, 5, 6]
    Description: Number of Route Table IDs to update. This must match your items in the comma-separated list of RouteTableIds parameter.
    Type: String
  NumberOfSecurityGroups:
    AllowedValues: [1, 2, 3, 4, 5, 6]
    Description: Number of Security Group IDs. This must match your selections in the list of SecurityGroupIds parameter.
    Type: String
  PeerNumberOfRouteTables:
    AllowedValues: [1, 2, 3, 4, 5, 6]
    Description: Number of Route Table IDs to update. This must match your items in the comma-separated list of RouteTableIds parameter.
    Type: String
  PeerNumberOfSecurityGroups:
    AllowedValues: [1, 2, 3, 4, 5, 6]
    Description: Number of Security Group IDs. This must match your selections in the list of SecurityGroupIds parameter.
    Type: String
  PeerName:
    Description: Name of the VPC Peer
    MaxLength: 255
    Type: String
  PeerOwnerId:
    AllowedPattern: '^\d{12}$'
    ConstraintDescription: Must be 12 digits.
    Description: AWS account ID of the owner of the accepter VPC
    Type: String
  PeerRoleARN:
    AllowedPattern: '^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role\/([\w+=,.@-]*\/)*[\w+=,.@-]+'
    Description:
      ARN of the VPC peer role for the peering connection in another AWS account. Required when you are peering a VPC in a different AWS account.
    Type: String
  PeerVPCID:
    AllowedPattern: '^vpc-[0-9a-f]{17}$'
    ConstraintDescription: Must have a prefix of "vpc-". Followed by 17 characters (numbers, letters "a-f")
    Description: ID of the VPC with which you are creating the VPC peering connection
    Type: String
  VPCID:
    Description: ID of the VPC
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR of the VPC Peer
    Type: String
  PeerVPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: CIDR of the VPC Peer
    Type: String
  RouteTableIds:
    AllowedPattern: '^(rtb-[0-9a-f]{17})$|^((rtb-[0-9a-f]{17}(,|, ))*rtb-[0-9a-f]{17})$'
    ConstraintDescription:
      Must have a prefix of "rtb-". Followed by 17 characters (numbers, letters "a-f"). Additional route tables can be provided, separated by a
      "comma".
    Description: Route Table IDs that will be updated to allow communications via the VPC peering connection. Note, the logical order is preserved.
    Type: String
  SecurityGroupIds:
    Description: Security Group IDs that will be updated to allow communications via the VPC peering connection. Note, the logical order is preserved.
    Type: List<AWS::EC2::SecurityGroup::Id>
  PeerRouteTableIds:
    AllowedPattern: '^(rtb-[0-9a-f]{17})$|^((rtb-[0-9a-f]{17}(,|, ))*rtb-[0-9a-f]{17})$'
    ConstraintDescription:
      Must have a prefix of "rtb-". Followed by 17 characters (numbers, letters "a-f"). Additional route tables can be provided, separated by a
      "comma".
    Description: Route Table IDs that will be updated to allow communications via the VPC peering connection. Note, the logical order is preserved.
    Type: String
  PeerSecurityGroupIds:
    Description: Security Group IDs that will be updated to allow communications via the VPC peering connection. Note, the logical order is preserved.
    Type: List<AWS::EC2::SecurityGroup::Id>
Rules:
  PeerRoleValidation:
    RuleCondition: !Equals [!Ref PeerRoleARN, '']
    Assertions:
      - AssetDescription: ARN of the VPC peer role is required when you are peering a VPC in a different AWS account.
        Assert: !Equals [!Ref PeerOwnerId, !Ref AWS::AccountId]
Conditions:
  PeerRoleCondition: !Not [!Equals [!Ref PeerRoleARN, '']]
  2RouteTableCondition: !Or
    - !Equals [!Ref NumberOfRouteTables, 2]
    - !Condition 3RouteTableCondition
    - !Condition 4RouteTableCondition
    - !Condition 5RouteTableCondition
    - !Condition 6RouteTableCondition
  3RouteTableCondition: !Or
    - !Equals [!Ref NumberOfRouteTables, 3]
    - !Condition 4RouteTableCondition
    - !Condition 5RouteTableCondition
    - !Condition 6RouteTableCondition
  4RouteTableCondition: !Or
    - !Equals [!Ref NumberOfRouteTables, 4]
    - !Condition 5RouteTableCondition
    - !Condition 6RouteTableCondition
  5RouteTableCondition: !Or
    - !Equals [!Ref NumberOfRouteTables, 5]
    - !Condition 6RouteTableCondition
  6RouteTableCondition: !Equals [!Ref NumberOfRouteTables, 6]
  2SecurityGroupCondition: !Or
    - !Equals [!Ref NumberOfSecurityGroups, 2]
    - !Condition 3SecurityGroupCondition
    - !Condition 4SecurityGroupCondition
    - !Condition 5SecurityGroupCondition
    - !Condition 6SecurityGroupCondition
  3SecurityGroupCondition: !Or
    - !Equals [!Ref NumberOfSecurityGroups, 3]
    - !Condition 4SecurityGroupCondition
    - !Condition 5SecurityGroupCondition
    - !Condition 6SecurityGroupCondition
  4SecurityGroupCondition: !Or
    - !Equals [!Ref NumberOfSecurityGroups, 4]
    - !Condition 5SecurityGroupCondition
    - !Condition 6SecurityGroupCondition
  5SecurityGroupCondition: !Or
    - !Equals [!Ref NumberOfSecurityGroups, 5]
    - !Condition 6SecurityGroupCondition
  6SecurityGroupCondition: !Equals [!Ref NumberOfSecurityGroups, 6]
  Peer2RouteTableCondition: !Or
    - !Equals [!Ref PeerNumberOfRouteTables, 2]
    - !Condition Peer3RouteTableCondition
    - !Condition Peer4RouteTableCondition
    - !Condition Peer5RouteTableCondition
    - !Condition Peer6RouteTableCondition
  Peer3RouteTableCondition: !Or
    - !Equals [!Ref PeerNumberOfRouteTables, 3]
    - !Condition Peer4RouteTableCondition
    - !Condition Peer5RouteTableCondition
    - !Condition Peer6RouteTableCondition
  Peer4RouteTableCondition: !Or
    - !Equals [!Ref PeerNumberOfRouteTables, 4]
    - !Condition Peer5RouteTableCondition
    - !Condition Peer6RouteTableCondition
  Peer5RouteTableCondition: !Or
    - !Equals [!Ref PeerNumberOfRouteTables, 5]
    - !Condition Peer6RouteTableCondition
  Peer6RouteTableCondition: !Equals [!Ref PeerNumberOfRouteTables, 6]
  Peer2SecurityGroupCondition: !Or
    - !Equals [!Ref PeerNumberOfSecurityGroups, 2]
    - !Condition Peer3SecurityGroupCondition
    - !Condition Peer4SecurityGroupCondition
    - !Condition Peer5SecurityGroupCondition
    - !Condition Peer6SecurityGroupCondition
  Peer3SecurityGroupCondition: !Or
    - !Equals [!Ref PeerNumberOfSecurityGroups, 3]
    - !Condition Peer4SecurityGroupCondition
    - !Condition Peer5SecurityGroupCondition
    - !Condition Peer6SecurityGroupCondition
  Peer4SecurityGroupCondition: !Or
    - !Equals [!Ref PeerNumberOfSecurityGroups, 4]
    - !Condition Peer5SecurityGroupCondition
    - !Condition Peer6SecurityGroupCondition
  Peer5SecurityGroupCondition: !Or
    - !Equals [!Ref PeerNumberOfSecurityGroups, 5]
    - !Condition Peer6SecurityGroupCondition
  Peer6SecurityGroupCondition: !Equals [!Ref PeerNumberOfSecurityGroups, 6]
Resources:
  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref VPCID
      PeerVpcId: !Ref PeerVPCID
      PeerOwnerId: !Ref PeerOwnerId
      PeerRoleArn: !If [PeerRoleCondition, !Ref PeerRoleARN, !Ref AWS::NoValue]
      Tags:
        - Key: Name
          Value: !Ref PeerName
  PeerRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [0, !Split [',', !Ref RouteTableIds]]
      DestinationCidrBlock: !Ref PeerVPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  PeerRoute2:
    Condition: 2RouteTableCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [1, !Split [',', !Ref RouteTableIds]]
      DestinationCidrBlock: !Ref PeerVPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  PeerRoute3:
    Condition: 3RouteTableCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [2, !Split [',', !Ref RouteTableIds]]
      DestinationCidrBlock: !Ref PeerVPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringCOnnectionId
  PeerRoute4:
    Condition: 4RouteTableCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [3, !Split [',', !Ref RouteTableIds]]
      DestinationCidrBlock: !Ref PeerVPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringCOnnectionId
  PeerRoute5:
    Condition: 5RouteTableCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [4, !Split [',', !Ref RouteTableIds]]
      DestinationCidrBlock: !Ref PeerVPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringCOnnectionId
  PeerRoute6:
    Condition: 6RouteTableCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [5, !Split [',', !Ref RouteTableIds]]
      DestinationCidrBlock: !Ref PeerVPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringCOnnectionId
  PeerIngressRule1:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer, ${PeerName}
      GroupId: !Select [0, !Ref SecurityGroupIds]
      CidrIp: !Ref PeerVPCCIDR
  PeerIngressRule2:
    Condition: 2SecurityGroupCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer CIDR, ${PeerName}
      GroupId: !Select [1, !Ref SecurityGroupIds]
      CidrIp: !Ref PeerVPCCIDR
  PeerIngressRule3:
    Condition: 3SecurityGroupCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer, ${PeerName}
      GroupId: !Select [2, !Ref SecurityGroupIds]
      CidrIp: !Ref PeerVPCCIDR
  PeerIngressRule4:
    Condition: 4SecurityGroupCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer, ${PeerName}
      GroupId: !Select [3, !Ref SecurityGroupIds]
      CidrIp: !Ref PeerVPCCIDR
  PeerIngressRule5:
    Condition: 5SecurityGroupCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer, ${PeerName}
      GroupId: !Select [4, !Ref SecurityGroupIds]
      CidrIp: !Ref PeerVPCCIDR
  PeerIngressRule6:
    Condition: 6SecurityGroupCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer, ${PeerName}
      GroupId: !Select [5, !Ref SecurityGroupIds]
      CidrIp: !Ref PeerVPCCIDR
  Route1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [0, !Split [',', !Ref PeerRouteTableIds]]
      DestinationCidrBlock: !Ref VPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  Route2:
    Condition: Peer2RouteTableCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [1, !Split [',', !Ref PeerRouteTableIds]]
      DestinationCidrBlock: !Ref VPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection
  Route3:
    Condition: Peer3RouteTableCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [2, !Split [',', !Ref PeerRouteTableIds]]
      DestinationCidrBlock: !Ref VPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringCOnnectionId
  Route4:
    Condition: Peer4RouteTableCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [3, !Split [',', !Ref PeerRouteTableIds]]
      DestinationCidrBlock: !Ref VPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringCOnnectionId
  Route5:
    Condition: Peer5RouteTableCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [4, !Split [',', !Ref PeerRouteTableIds]]
      DestinationCidrBlock: !Ref VPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringCOnnectionId
  Route6:
    Condition: Peer6RouteTableCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Select [5, !Split [',', !Ref PeerRouteTableIds]]
      DestinationCidrBlock: !Ref VPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringCOnnectionId
  IngressRule1:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications in VPC Peer, ${PeerName}
      GroupId: !Select [0, !Ref PeerSecurityGroupIds]
      CidrIp: !Ref VPCCIDR
  IngressRule2:
    Condition: Peer2SecurityGroupCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer CIDR, ${PeerName}
      GroupId: !Select [1, !Ref PeerSecurityGroupIds]
      CidrIp: !Ref VPCCIDR
  IngressRule3:
    Condition: Peer3SecurityGroupCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer, ${PeerName}
      GroupId: !Select [2, !Ref PeerSecurityGroupIds]
      CidrIp: !Ref VPCCIDR
  IngressRule4:
    Condition: Peer4SecurityGroupCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer, ${PeerName}
      GroupId: !Select [3, !Ref PeerSecurityGroupIds]
      CidrIp: !Ref VPCCIDR
  IngressRule5:
    Condition: Peer5SecurityGroupCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer, ${PeerName}
      GroupId: !Select [4, !Ref PeerSecurityGroupIds]
      CidrIp: !Ref VPCCIDR
  IngressRule6:
    Condition: Peer6SecurityGroupCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow all inbound communications from VPC Peer CIDR (for Lab purposes)
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: '-1'
      Description: !Sub LAB - Allow All Inbound Communications from VPC Peer, ${PeerName}
      GroupId: !Select [5, !Ref PeerSecurityGroupIds]
      CidrIp: !Ref VPCCIDR
Outputs:
  VPCPeeringConnectionId:
    Description: VPC Peering Connection ID
    Value: !Ref VPCPeeringConnection
